<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace为对应的Mapper接口的包名-->
<mapper namespace="com.example.community.dao.UserMapper">
    <!--定义一个可以复用的sql字段，简化后面sql语句的代码重复性-->
    <sql id="insertFields">
        username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>
    <sql id="selectFields">
        id, username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>
    <!--id 为对应的方法名，resultType为查询返回的数据类型-->
    <select id="selectById" resultType="User">
        select
        <include refid="selectFields"/>
        from user
        where id = #{id}
    </select>
    <select id="selectByEmail" resultType="User">
        select <include refid="selectFields"/>
        from user
        where email = #{email}
    </select>

    <!--插入操作 如果不是简单的类型参数则需要声明
    参数类型parameterType
    User类中与表中主键对应的属性名 keyProperty, Mybatis从数据库中插入User后自增的主键将回填到User的id属性中-->
    <insert id="insertUser" parameterType="User" keyProperty="id">
        insert into user (<include refid="insertFields"/>)
        values(#{username}, #{password}, #{salt}, #{email}, #{type}, #{status}, #{activationCode}, #{headerUrl}, #{createTime})
    </insert>

    <update id="updateStatus">
        update user set status = #{status} where id = #{id}
    </update>


    <update id="updateHeader">
        update user set header_url = #{headerUrl} where id = #{id}
    </update>

    <update id="updatePassword">
        update user set password = #{password} where id = #{id}
    </update>

</mapper>